{"version":3,"sources":["Rating.tsx","RatingControl.tsx","ratingControlTester.ts","App.tsx","eml-blank.xml.js","index.tsx"],"names":["Rating","id","value","updateValue","useState","hoverAt","setHoverAt","className","style","cursor","map","i","fullStars","onMouseOver","onMouseOut","onClick","withJsonFormsControlProps","data","handleChange","path","newValue","rankWith","scopeEndsWith","useStyles","makeStyles","_theme","container","padding","width","title","textAlign","dataContent","display","justifyContent","borderRadius","backgroundColor","marginBottom","resetButton","margin","demoform","initialData","renderers","materialRenderers","tester","ratingControlTester","renderer","RatingControl","App","classes","setDisplayDataAsString","jsonformsData","setJsonformsData","useEffect","JSON","stringify","getPopulatedEmlTemplate","emlDoc","DOMParser","parseFromString","node","querySelector","innerHTML","XMLSerializer","serializeToString","Grid","justify","spacing","item","sm","Typography","variant","schema","uischema","cells","materialCells","onChange","errors","Button","element","document","createElement","file","Blob","type","href","URL","createObjectURL","download","body","appendChild","click","color","theme","createMuiTheme","overrides","MuiFormControl","root","ReactDOM","render","ThemeProvider","CssBaseline","getElementById"],"mappings":"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","file":"static/js/main.f17bc603.chunk.js","sourcesContent":["import React from 'react';\nimport { useState } from 'react';\n\ninterface RatingProps {\n  id?: string;\n  value: number;\n  updateValue: (newValue: number) => void;\n}\n\nexport const Rating: React.FC<RatingProps> = ({ id, value, updateValue }) => {\n  const [hoverAt, setHoverAt] = useState<number | null>(null);\n\n  return (\n    <div id='#/properties/rating' className='rating'>\n      <p>Rating:</p>\n      <span style={{ cursor: 'pointer' }}>\n        {[0, 1, 2, 3, 4].map((i) => {\n          const fullStars = hoverAt ?? value;\n\n          return (\n            <span\n              onMouseOver={() => setHoverAt(i + 1)}\n              onMouseOut={() => setHoverAt(null)}\n              onClick={() => updateValue(i + 1)}\n              key={`${id}_${i}`}\n            >\n              {i < fullStars ? '\\u2605' : '\\u2606'}\n            </span>\n          );\n        })}\n      </span>\n    </div>\n  );\n};\n","import { withJsonFormsControlProps } from '@jsonforms/react';\nimport { Rating } from './Rating';\n\ninterface RatingControlProps {\n  data: any;\n  handleChange(path: string, value: any): void;\n  path: string;\n}\n\nconst RatingControl = ({ data, handleChange, path }: RatingControlProps) => (\n  <Rating\n    value={data}\n    updateValue={(newValue: number) => handleChange(path, newValue)}\n  />\n);\n\nexport default withJsonFormsControlProps(RatingControl);\n","import { rankWith, scopeEndsWith } from '@jsonforms/core';\n\nexport default rankWith(\n  3, //increase rank as needed\n  scopeEndsWith('rating')\n);\n","import { Fragment, useState, useEffect } from 'react';\nimport { JsonForms } from '@jsonforms/react';\nimport Grid from '@material-ui/core/Grid';\nimport Button from '@material-ui/core/Button';\nimport Typography from '@material-ui/core/Typography';\nimport logo from './logo.svg';\nimport './App.css';\nimport schema from './schema.json';\nimport uischema from './uischema.json';\nimport {\n  materialCells,\n  materialRenderers,\n} from '@jsonforms/material-renderers';\nimport RatingControl from './RatingControl';\nimport ratingControlTester from './ratingControlTester';\nimport { makeStyles } from '@material-ui/core/styles';\nimport emlTemplate from './eml-blank.xml.js';\n\nconst useStyles = makeStyles((_theme) => ({\n  container: {\n    padding: '1em',\n    width: '100%',\n  },\n  title: {\n    textAlign: 'center',\n    padding: '0.25em',\n  },\n  dataContent: {\n    display: 'flex',\n    justifyContent: 'center',\n    borderRadius: '0.25em',\n    backgroundColor: '#cecece',\n    marginBottom: '1rem',\n  },\n  resetButton: {\n    margin: 'auto',\n    display: 'block',\n  },\n  demoform: {\n    margin: 'auto',\n    padding: '1rem',\n  },\n}));\n\nconst initialData = {};\n\nconst renderers = [\n  ...materialRenderers,\n  //register custom renderers\n  { tester: ratingControlTester, renderer: RatingControl },\n];\n\nconst App = () => {\n  const classes = useStyles();\n  const [displayDataAsString, setDisplayDataAsString] = useState('');\n  const [jsonformsData, setJsonformsData] = useState<any>(initialData);\n\n  useEffect(() => {\n    setDisplayDataAsString(JSON.stringify(jsonformsData, null, 2));\n  }, [jsonformsData]);\n\n\n  const getPopulatedEmlTemplate = () => {\n    const parser = new DOMParser();\n    var emlDoc = parser.parseFromString(emlTemplate, \"text/xml\");\n    var node = emlDoc.querySelector('eml>dataset>title');\n    if (node) {\n      node.innerHTML = jsonformsData['title'] || '';\n      //node.setAttribute('attributelabel', 'attributevalue');\n    }\n    var XMLS = new XMLSerializer();\n    var inp_xmls = XMLS.serializeToString(emlDoc);\n    return inp_xmls;\n  }\n\n  const downloadEML = () => {\n    const element = document.createElement(\"a\");\n    const file = new Blob([getPopulatedEmlTemplate()], {type: 'text/plain'});\n    element.href = URL.createObjectURL(file);\n    element.download = \"eml.xml\";\n    document.body.appendChild(element); // Required for this to work in FireFox\n    element.click();\n  };\n\n  return (\n    <Fragment>\n      <div className='App'>\n        <header className='App-header'>\n          <h1 className='App-title'>EML generator</h1>\n          <p className='App-intro'>Fill in metadata in english. More detail = better findability = more citations.</p>\n        </header>\n      </div>\n\n      <Grid\n        container\n        justify={'center'}\n        spacing={1}\n        className={classes.container}\n      >\n        <Grid item sm={11}>\n          <Typography variant={'h3'} className={classes.title}>\n            Rendered form\n          </Typography>\n          <div className={classes.demoform}>\n            <JsonForms\n              schema={schema}\n              uischema={uischema}\n              data={jsonformsData}\n              renderers={renderers}\n              cells={materialCells}\n              onChange={({ errors, data }) => setJsonformsData(data)}\n            />\n          </div>\n        </Grid>\n        <Grid item sm={1}>\n          <Button\n            className={classes.resetButton}\n            onClick={downloadEML}\n            color='primary'\n            variant='contained'\n          >\n            Download EML\n          </Button>\n        </Grid>\n      </Grid>\n    </Fragment>\n  );\n};\n\nexport default App;\n","var emlTemplate = `<?xml version=\"1.0\" encoding=\"UTF-8\"?>\n<eml:eml xmlns:eml=\"eml://ecoinformatics.org/eml-2.1.1\" xmlns:dc=\"http://purl.org/dc/terms/\" xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"eml://ecoinformatics.org/eml-2.1.1 http://rs.gbif.org/schema/eml-gbif-profile/1.1/eml.xsd\" packageId=\"https://ipt.gbif.no/resource?id=test/v1.1\" system=\"http://gbif.org\" scope=\"system\" xml:lang=\"eng\">\n   <dataset>\n      <alternateIdentifier />\n      <title xml:lang=\"eng\" />\n      <creator>\n         <individualName>\n            <givenName />\n            <surName />\n         </individualName>\n         <organizationName />\n         <positionName />\n         <address>\n            <deliveryPoint />\n            <city />\n            <administrativeArea />\n            <postalCode />\n            <country />\n         </address>\n         <phone />\n         <electronicMailAddress />\n         <onlineUrl />\n         <userId directory=\"\" />\n      </creator>\n      <metadataProvider>\n         <individualName>\n            <givenName />\n            <surName />\n         </individualName>\n         <organizationName />\n         <positionName />\n         <address>\n            <deliveryPoint />\n            <city />\n            <administrativeArea />\n            <postalCode />\n            <country />\n         </address>\n         <phone />\n         <electronicMailAddress />\n         <onlineUrl />\n         <userId directory=\"\" />\n      </metadataProvider>\n      <associatedParty>\n         <individualName>\n            <givenName />\n            <surName />\n         </individualName>\n         <organizationName />\n         <positionName />\n         <address>\n            <deliveryPoint />\n            <city />\n            <administrativeArea />\n            <postalCode />\n            <country />\n         </address>\n         <phone />\n         <electronicMailAddress />\n         <onlineUrl />\n         <role />\n      </associatedParty>\n      <pubDate />\n      <language />\n      <abstract>\n         <para />\n      </abstract>\n      <keywordSet>\n         <keyword />\n         <keywordThesaurus />\n      </keywordSet>\n      <additionalInfo>\n         <para />\n      </additionalInfo>\n      <intellectualRights>\n         <para>\n            This work is licensed under a\n            <ulink url=\"http://creativecommons.org/licenses/by/4.0/legalcode\">\n               <citetitle>Creative Commons Attribution (CC-BY) 4.0 License</citetitle>\n            </ulink>.\n         </para>\n      </intellectualRights>\n      <distribution scope=\"document\">\n         <online>\n            <url function=\"information\" />\n         </online>\n      </distribution>\n      <coverage>\n         <geographicCoverage>\n            <geographicDescription />\n            <boundingCoordinates>\n               <westBoundingCoordinate />\n               <eastBoundingCoordinate />\n               <northBoundingCoordinate />\n               <southBoundingCoordinate />\n            </boundingCoordinates>\n         </geographicCoverage>\n         <temporalCoverage>\n            <singleDateTime>\n               <calendarDate />\n            </singleDateTime>\n         </temporalCoverage>\n         <taxonomicCoverage>\n            <generalTaxonomicCoverage />\n            <taxonomicClassification>\n               <taxonRankName />\n               <taxonRankValue />\n            </taxonomicClassification>\n            <taxonomicClassification>\n               <taxonRankName />\n               <taxonRankValue />\n            </taxonomicClassification>\n         </taxonomicCoverage>\n      </coverage>\n      <purpose>\n         <para />\n      </purpose>\n      <maintenance>\n         <description>\n            <para />\n         </description>\n         <maintenanceUpdateFrequency />\n      </maintenance>\n      <contact>\n         <individualName>\n            <givenName />\n            <surName />\n         </individualName>\n         <organizationName />\n         <positionName />\n         <address>\n            <deliveryPoint />\n            <city />\n            <administrativeArea />\n            <postalCode />\n            <country />\n         </address>\n         <phone />\n         <electronicMailAddress />\n         <onlineUrl />\n         <userId directory=\"\" />\n      </contact>\n      <methods>\n         <methodStep>\n            <description>\n               <para />\n            </description>\n         </methodStep>\n         <methodStep>\n            <description>\n               <para />\n            </description>\n         </methodStep>\n         <sampling>\n            <studyExtent>\n               <description>\n                  <para />\n               </description>\n            </studyExtent>\n            <samplingDescription>\n               <para />\n            </samplingDescription>\n         </sampling>\n         <qualityControl>\n            <description>\n               <para />\n            </description>\n         </qualityControl>\n      </methods>\n      <project id=\"ident\">\n         <title />\n         <personnel>\n            <individualName>\n               <givenName />\n               <surName />\n            </individualName>\n            <userId directory=\"\" />\n            <role />\n         </personnel>\n         <abstract>\n            <para />\n         </abstract>\n         <funding>\n            <para />\n         </funding>\n         <studyAreaDescription>\n            <descriptor name=\"generic\" citableClassificationSystem=\"false\">\n               <descriptorValue />\n            </descriptor>\n         </studyAreaDescription>\n         <designDescription>\n            <description>\n               <para />\n            </description>\n         </designDescription>\n      </project>\n   </dataset>\n   <additionalMetadata>\n      <metadata>\n         <gbif>\n            <dateStamp />\n            <hierarchyLevel>dataset</hierarchyLevel>\n            <citation identifier=\"\" />\n            <physical>\n               <objectName />\n               <characterEncoding />\n               <dataFormat>\n                  <externallyDefinedFormat>\n                     <formatName />\n                     <formatVersion />\n                  </externallyDefinedFormat>\n               </dataFormat>\n               <distribution>\n                  <online>\n                     <url function=\"download\" />\n                  </online>\n               </distribution>\n            </physical>\n            <resourceLogoUrl />\n            <collection>\n               <parentCollectionIdentifier />\n               <collectionIdentifier />\n               <collectionName />\n            </collection>\n            <specimenPreservationMethod />\n            <jgtiCuratorialUnit>\n               <jgtiUnitType />\n               <jgtiUnitRange>\n                  <beginRange />\n                  <endRange />\n               </jgtiUnitRange>\n            </jgtiCuratorialUnit>\n            <dc:replaces />\n         </gbif>\n      </metadata>\n   </additionalMetadata>\n</eml:eml>`;\n\nexport default emlTemplate ;\n","import { createMuiTheme, CssBaseline, ThemeProvider } from '@material-ui/core';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\n/**\n * Customize form so each control has more space\n */\nconst theme = createMuiTheme({\n  overrides: {\n    MuiFormControl: {\n      root: {\n        margin: '0.8em 0',\n      },\n    },\n  },\n});\n\nReactDOM.render(\n  <ThemeProvider theme={theme}>\n    <CssBaseline />\n    <App />\n  </ThemeProvider>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}